--- a/modules/cudev/include/opencv2/cudev/warp/shuffle.hpp	2020-09-14 11:41:32.931946818 +0200
+++ b/modules/cudev/include/opencv2/cudev/warp/shuffle.hpp	2020-09-14 11:49:34.553952853 +0200
@@ -60,37 +60,37 @@
 
 __device__ __forceinline__ uchar shfl(uchar val, int srcLane, int width = warpSize)
 {
-    return (uchar) __shfl((int) val, srcLane, width);
+    return (uchar) __shfl_sync(0xffffffff, (int) val, srcLane, width);
 }
 
 __device__ __forceinline__ schar shfl(schar val, int srcLane, int width = warpSize)
 {
-    return (schar) __shfl((int) val, srcLane, width);
+    return (schar) __shfl_sync(0xffffffff, (int) val, srcLane, width);
 }
 
 __device__ __forceinline__ ushort shfl(ushort val, int srcLane, int width = warpSize)
 {
-    return (ushort) __shfl((int) val, srcLane, width);
+    return (ushort) __shfl_sync(0xffffffff, (int) val, srcLane, width);
 }
 
 __device__ __forceinline__ short shfl(short val, int srcLane, int width = warpSize)
 {
-    return (short) __shfl((int) val, srcLane, width);
+    return (short) __shfl_sync(0xffffffff, (int) val, srcLane, width);
 }
 
 __device__ __forceinline__ int shfl(int val, int srcLane, int width = warpSize)
 {
-    return __shfl(val, srcLane, width);
+    return __shfl_sync(0xffffffff, val, srcLane, width);
 }
 
 __device__ __forceinline__ uint shfl(uint val, int srcLane, int width = warpSize)
 {
-    return (uint) __shfl((int) val, srcLane, width);
+    return (uint) __shfl_sync(0xffffffff, (int) val, srcLane, width);
 }
 
 __device__ __forceinline__ float shfl(float val, int srcLane, int width = warpSize)
 {
-    return __shfl(val, srcLane, width);
+    return __shfl_sync(0xffffffff, val, srcLane, width);
 }
 
 __device__ double shfl(double val, int srcLane, int width = warpSize)
@@ -98,8 +98,8 @@
     int lo = __double2loint(val);
     int hi = __double2hiint(val);
 
-    lo = __shfl(lo, srcLane, width);
-    hi = __shfl(hi, srcLane, width);
+    lo = __shfl_sync(0xffffffff, lo, srcLane, width);
+    hi = __shfl_sync(0xffffffff, hi, srcLane, width);
 
     return __hiloint2double(hi, lo);
 }
@@ -151,37 +151,37 @@
 
 __device__ __forceinline__ uchar shfl_up(uchar val, uint delta, int width = warpSize)
 {
-    return (uchar) __shfl_up((int) val, delta, width);
+    return (uchar) __shfl_up_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ schar shfl_up(schar val, uint delta, int width = warpSize)
 {
-    return (schar) __shfl_up((int) val, delta, width);
+    return (schar) __shfl_up_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ ushort shfl_up(ushort val, uint delta, int width = warpSize)
 {
-    return (ushort) __shfl_up((int) val, delta, width);
+    return (ushort) __shfl_up_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ short shfl_up(short val, uint delta, int width = warpSize)
 {
-    return (short) __shfl_up((int) val, delta, width);
+    return (short) __shfl_up_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ int shfl_up(int val, uint delta, int width = warpSize)
 {
-    return __shfl_up(val, delta, width);
+    return __shfl_up_sync(0xffffffff, val, delta, width);
 }
 
 __device__ __forceinline__ uint shfl_up(uint val, uint delta, int width = warpSize)
 {
-    return (uint) __shfl_up((int) val, delta, width);
+    return (uint) __shfl_up_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ float shfl_up(float val, uint delta, int width = warpSize)
 {
-    return __shfl_up(val, delta, width);
+    return __shfl_up_sync(0xffffffff, val, delta, width);
 }
 
 __device__ double shfl_up(double val, uint delta, int width = warpSize)
@@ -189,8 +189,8 @@
     int lo = __double2loint(val);
     int hi = __double2hiint(val);
 
-    lo = __shfl_up(lo, delta, width);
-    hi = __shfl_up(hi, delta, width);
+    lo = __shfl_up_sync(0xffffffff, lo, delta, width);
+    hi = __shfl_up_sync(0xffffffff, hi, delta, width);
 
     return __hiloint2double(hi, lo);
 }
@@ -242,37 +242,37 @@
 
 __device__ __forceinline__ uchar shfl_down(uchar val, uint delta, int width = warpSize)
 {
-    return (uchar) __shfl_down((int) val, delta, width);
+    return (uchar) __shfl_down_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ schar shfl_down(schar val, uint delta, int width = warpSize)
 {
-    return (schar) __shfl_down((int) val, delta, width);
+    return (schar) __shfl_down_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ ushort shfl_down(ushort val, uint delta, int width = warpSize)
 {
-    return (ushort) __shfl_down((int) val, delta, width);
+    return (ushort) __shfl_down_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ short shfl_down(short val, uint delta, int width = warpSize)
 {
-    return (short) __shfl_down((int) val, delta, width);
+    return (short) __shfl_down_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ int shfl_down(int val, uint delta, int width = warpSize)
 {
-    return __shfl_down(val, delta, width);
+    return __shfl_down_sync(0xffffffff, val, delta, width);
 }
 
 __device__ __forceinline__ uint shfl_down(uint val, uint delta, int width = warpSize)
 {
-    return (uint) __shfl_down((int) val, delta, width);
+    return (uint) __shfl_down_sync(0xffffffff, (int) val, delta, width);
 }
 
 __device__ __forceinline__ float shfl_down(float val, uint delta, int width = warpSize)
 {
-    return __shfl_down(val, delta, width);
+    return __shfl_down_sync(0xffffffff, val, delta, width);
 }
 
 __device__ double shfl_down(double val, uint delta, int width = warpSize)
@@ -280,8 +280,8 @@
     int lo = __double2loint(val);
     int hi = __double2hiint(val);
 
-    lo = __shfl_down(lo, delta, width);
-    hi = __shfl_down(hi, delta, width);
+    lo = __shfl_down_sync(0xffffffff, lo, delta, width);
+    hi = __shfl_down_sync(0xffffffff, hi, delta, width);
 
     return __hiloint2double(hi, lo);
 }
@@ -333,37 +333,37 @@
 
 __device__ __forceinline__ uchar shfl_xor(uchar val, int laneMask, int width = warpSize)
 {
-    return (uchar) __shfl_xor((int) val, laneMask, width);
+    return (uchar) __shfl_xor_sync(0xffffffff, (int) val, laneMask, width);
 }
 
 __device__ __forceinline__ schar shfl_xor(schar val, int laneMask, int width = warpSize)
 {
-    return (schar) __shfl_xor((int) val, laneMask, width);
+    return (schar) __shfl_xor_sync(0xffffffff, (int) val, laneMask, width);
 }
 
 __device__ __forceinline__ ushort shfl_xor(ushort val, int laneMask, int width = warpSize)
 {
-    return (ushort) __shfl_xor((int) val, laneMask, width);
+    return (ushort) __shfl_xor_sync(0xffffffff, (int) val, laneMask, width);
 }
 
 __device__ __forceinline__ short shfl_xor(short val, int laneMask, int width = warpSize)
 {
-    return (short) __shfl_xor((int) val, laneMask, width);
+    return (short) __shfl_xor_sync(0xffffffff, (int) val, laneMask, width);
 }
 
 __device__ __forceinline__ int shfl_xor(int val, int laneMask, int width = warpSize)
 {
-    return __shfl_xor(val, laneMask, width);
+    return __shfl_xor_sync(0xffffffff, val, laneMask, width);
 }
 
 __device__ __forceinline__ uint shfl_xor(uint val, int laneMask, int width = warpSize)
 {
-    return (uint) __shfl_xor((int) val, laneMask, width);
+    return (uint) __shfl_xor_sync(0xffffffff, (int) val, laneMask, width);
 }
 
 __device__ __forceinline__ float shfl_xor(float val, int laneMask, int width = warpSize)
 {
-    return __shfl_xor(val, laneMask, width);
+    return __shfl_xor_sync(0xffffffff, val, laneMask, width);
 }
 
 __device__ double shfl_xor(double val, int laneMask, int width = warpSize)
@@ -371,8 +371,8 @@
     int lo = __double2loint(val);
     int hi = __double2hiint(val);
 
-    lo = __shfl_xor(lo, laneMask, width);
-    hi = __shfl_xor(hi, laneMask, width);
+    lo = __shfl_xor_sync(0xffffffff, lo, laneMask, width);
+    hi = __shfl_xor_sync(0xffffffff, hi, laneMask, width);
 
     return __hiloint2double(hi, lo);
 }

--- a/modules/cudev/include/opencv2/cudev/util/saturate_cast.hpp	2020-09-14 13:00:37.988891620 +0200
+++ b/modules/cudev/include/opencv2/cudev/util/saturate_cast.hpp	2020-09-14 13:03:17.818880667 +0200
@@ -47,6 +47,9 @@
 #define OPENCV_CUDEV_UTIL_SATURATE_CAST_HPP

 #include "../common.hpp"
+#if __CUDACC_VER_MAJOR__ >= 9
+#include <cuda_fp16.h>
+#endif

 namespace cv { namespace cudev {

@@ -274,12 +277,21 @@

 template <> __device__ __forceinline__ float cast_fp16<short, float>(short v)
 {
+#if __CUDACC_VER_MAJOR__ >= 9
+    return float(*(__half*)&v);
+#else
     return __half2float(v);
+#endif
 }

 template <> __device__ __forceinline__ short cast_fp16<float, short>(float v)
 {
-    return (short)__float2half_rn(v);
+#if __CUDACC_VER_MAJOR__ >= 9
+   __half h(v);
+   return *(short*)&h;
+#else
+   return (short)__float2half_rn(v);
+#endif
 }
 //! @}
